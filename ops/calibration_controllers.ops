
ros.import("lcsr_controllers");

/* Create calibration PID controller loop */
loadComponent("cal_pid","lcsr_controllers::JointPIDController");
loadComponent("cal_traj","lcsr_controllers::JointTrajGeneratorKDL");
loadComponent("cal_sac","lcsr_controllers::SemiAbsoluteCalibrationController");

connect("barrett_manager.wam.position_out", "cal_sac.joint_position_in", ConnPolicy());
connect("barrett_manager.wam.resolver_offset_out", "cal_sac.resolver_offset_in", ConnPolicy());

connect("cal_sac.joint_position_estimate_out", "cal_pid.joint_position_in", ConnPolicy());
connect("barrett_manager.wam.velocity_out", "cal_pid.joint_velocity_in", ConnPolicy());
connect("cal_traj.joint_position_out", "cal_pid.joint_position_cmd_in", ConnPolicy());
connect("cal_traj.joint_velocity_out", "cal_pid.joint_velocity_cmd_in", ConnPolicy());

connect("cal_sac.joint_position_estimate_out", "cal_traj.joint_position_in", ConnPolicy());
connect("cal_sac.joint_position_desired_out", "cal_traj.joint_position_cmd_in", ConnPolicy());

connect("cal_pid.joint_effort_out", "barrett_manager.wam.effort_in", ConnPolicy());

cal_pid.configure();
cal_sac.configure();
cal_traj.configure();

/* Configure conman interface */
addPeer("scheme","cal_pid");
addPeer("scheme","cal_traj");
addPeer("scheme","cal_sac");

scheme.addGroup("calibration");
scheme.addToGroup("cal_pid","calibration");
scheme.addToGroup("cal_traj","calibration");
scheme.addToGroup("cal_sac","calibration");

